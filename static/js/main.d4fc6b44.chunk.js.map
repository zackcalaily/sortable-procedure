{"version":3,"sources":["components/EditableInput.js","components/styles/draggable.js","components/EditableWYSIWYG.js","components/Step.js","components/styles/controls.js","components/Activity.js","index.js","images/dotted-border.svg","../node_modules/contentful-ui-extensions-sdk/dist sync"],"names":["Input","Styled","input","_templateObject","Label","label","_templateObject2","EditableInput","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","toggleEditingState","setState","isEditing","state","onChange","text","value","update","type","id","field","onFocus","onKeyDown","event","key","_this2","react_default","a","createElement","placeholder","ref","onBlur","autoFocus","onClick","React","Component","Container","div","draggable_templateObject","DraggableHandle","draggable_templateObject2","Main","_templateObject3","Properties","_templateObject4","Name","_templateObject5","RemoveButton","_templateObject6","SaveButton","button","EditableWYSIWYG_templateObject","EditableWYSIWYG_templateObject2","EditableWYSIWYG","stripHtml","html","DOMParser","parseFromString","body","textContent","editor","getData","Fragment","dist_ckeditor_default","ClassicEditor","data","EditableWYSIWYG_Label","Content","Step_templateObject","Step","react_beautiful_dnd_esm","draggableId","step","index","provided","assign","draggableProps","innerRef","dragHandleProps","xmlns","width","height","viewBox","fill","d","EditableInput_EditableInput","name","onRemoveClick","activityId","className","EditableWYSIWYG_EditableWYSIWYG","details","Controls","controls_templateObject","AddButton","controls_templateObject2","PlusIcon","svg","controls_templateObject3","Spinner","controls_templateObject4","dottedBorderImage","Steps","Activity_templateObject","Activity","onIncrementStepChange","target","toLowerCase","increment","min","max","objectSpread","activity","onAddStepClick","droppableId","droppableProps","steps","map","Step_Step","src_templateObject","SortableProcedure","detachExternalChangeHandler","initialProcedureState","activities","activityOrder","onAddActivityClick","amount","procedure","toConsumableArray","i","ShortID","generate","stepOrder","push","updateProcedure","stepId","updatedActivity","defineProperty","arguments","length","undefined","sdk","dialogs","openConfirm","title","concat","message","confirmLabel","cancelLabel","then","result","removeActivity","reducedActivityStepOrder","filter","onExternalChangeHandler","onDragStart","window","stopAutoResizer","onDragEnd","destination","source","splice","sourceActivity","destinationActivity","_objectSpread5","sourceActivityStepOrder","destinationActivityStepOrder","updatedSourceActivity","updatedDestinationActivity","startAutoResizer","setValue","reducedActivityOrder","getValue","console","log","onValueChanged","src_Container","Activity_Activity","clear","init","ReactDOM","render","src_SortableProcedure","document","getElementById","module","exports","__webpack_require__","p","webpackEmptyContext","req","e","Error","code","keys","resolve"],"mappings":"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","file":"static/js/main.d4fc6b44.chunk.js","sourcesContent":["import React from 'react'\r\nimport Styled from 'styled-components';\r\n\r\nconst Input = Styled.input`\r\n    outline: none;\r\n    background-color: #fff;\r\n    border: 1px solid #dedce0;\r\n    max-height: 2.5rem;\r\n    color: #536171;\r\n    font-size: .875rem;\r\n    padding: .656rem;\r\n    margin: 0;\r\n    width: 90%;\r\n`;\r\n\r\nconst Label = Styled.label`\r\n    display: block;\r\n    width: 100%;\r\n`;\r\n\r\nexport default class EditableInput extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            isEditing: this.props.isEditing || false,\r\n            text: this.props.text || '',\r\n        }\r\n    }\r\n\r\n    toggleEditingState = () => {\r\n        this.setState({ isEditing: !this.state.isEditing });\r\n    }\r\n\r\n    onChange = () => {\r\n        this.setState({ text: this.input.value });\r\n        this.props.update(this.props.type, this.props.id, this.props.field, this.input.value);\r\n    }\r\n\r\n    onFocus = () => {\r\n        this.toggleEditingState();\r\n    }\r\n\r\n    onKeyDown = (event) => {\r\n        if (event.key === 'Enter') {\r\n            this.toggleEditingState();\r\n        }\r\n    }\r\n\r\n    render() {\r\n        if (this.state.isEditing) {\r\n            return (\r\n                <Input type=\"text\"\r\n                    placeholder={this.props.placeholder}\r\n                    value={this.state.text}\r\n                    ref={(input) => { this.input = input }}\r\n                    onChange={this.onChange}\r\n                    onBlur={this.onFocus}\r\n                    onKeyDown={this.onKeyDown}\r\n                    autoFocus\r\n                />\r\n            );\r\n        } else {\r\n            return (\r\n                <Label onClick={this.onFocus}>\r\n                    {this.state.text || this.props.placeholder}\r\n                </Label>\r\n            )\r\n        }\r\n    }\r\n}\r\n\r\n","import Styled from 'styled-components';\r\n\r\nexport const Container = Styled.div`\r\n    background-color: #fff;\r\n    border: 1px solid #d3dce0;\r\n    border-radius: 2px;\r\n    box-shadow: 0 1px 3px rgba(0, 0, 0, .08);\r\n    box-sizing: border-box;\r\n    cursor: pointer;\r\n    display: flex;\r\n    font-size: .875rem;\r\n    min-height: 5.25rem;\r\n    line-height: 1.5;\r\n    margin-top: 12px;\r\n    position: relative;\r\n    text-decoration: none;\r\n    transition: box-shadow .2s ease-in-out, border-color: .2s ease-in-out;\r\n\r\n    &:hover,\r\n    &:focus {\r\n        border-color: #5b9fef;\r\n    }\r\n`;\r\n\r\nexport const DraggableHandle = Styled.a`\r\n    display: flex;\r\n    align-items: center;\r\n    background-color: #f7f9fa;\r\n    border: 0;\r\n    border-right: 1px solid #d3dce0;\r\n    cursor: grab;\r\n    height: 100%;\r\n    padding: 0;\r\n    position: absolute;\r\n    transition: background-color .2s ease-in-out;\r\n    width: 1.25rem;\r\n\r\n    &:hover,\r\n    &:focus {\r\n        background-color: #e5ebed;\r\n    }\r\n\r\n    span {\r\n        display: flex;\r\n        align-items: center;\r\n        height: 100%;\r\n        left: 0;\r\n        outline: 0;\r\n        position: absolute;\r\n        top: 0;\r\n        width: 100%;\r\n        overflow: hidden;\r\n    }\r\n\r\n    svg {\r\n        fill: #8091a5;\r\n        height: 18px;\r\n        width: 18px;\r\n    }\r\n`;\r\n\r\nexport const Main = Styled.div`\r\n    display: block;\r\n    flex: 1 1 0;\r\n    overflow: hidden;\r\n    padding: .875rem;\r\n    margin-left: 1.25rem;\r\n    height: 100%;\r\n`;\r\n\r\nexport const Properties = Styled.div`\r\n    display: flex;\r\n    margin-bottom: .75rem;\r\n`; \r\n\r\nexport const Name = Styled.div`\r\n    flex: 1 1 0;\r\n    padding-right: 1.25rem;\r\n    color: #8091a5;\r\n    font-size: .875rem;\r\n`;\r\n\r\nexport const RemoveButton = Styled.div`\r\n    background-color: transparent;\r\n    border: 0;\r\n    cursor: pointer;\r\n    display: inline-block;\r\n    padding: 0;\r\n    margin-left: 40px;\r\n`;","import ClassicEditor from '@ckeditor/ckeditor5-build-classic';\r\nimport CKEditor from '@ckeditor/ckeditor5-react';\r\nimport React from 'react'\r\nimport Styled from 'styled-components';\r\n\r\nconst SaveButton = Styled.button`\r\n    border-color: #3072be;\r\n    background-image: linear-gradient(0deg, #3c80cf, #5b9fef);\r\n    background-size: 100% 200%;\r\n    border: .0625rem solid #c3cfd5;\r\n    font-size: .875rem;\r\n    transition: background .2s ease-in-out, opacity: .2 ease-in-out, border-color: .2s ease-in-out;\r\n    height: 2.5rem;\r\n    padding: 0 .875rem;\r\n    color: #f7f9fa;\r\n    margin-top: 5px;\r\n`;\r\n\r\nconst Label = Styled.label`\r\n    display: block;\r\n    width: 100%;\r\n`;\r\n\r\nexport default class EditableWYSIWYG extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            isEditing: this.props.isEditing || false,\r\n            text: this.props.text || '',\r\n        }\r\n    }\r\n\r\n    toggleEditingState = () => {\r\n        this.setState({ isEditing: !this.state.isEditing });\r\n    }\r\n\r\n    stripHtml = (html) => {\r\n        const doc = new DOMParser().parseFromString(html, 'text/html');\r\n        return doc.body.textContent || '';\r\n    }\r\n\r\n    onChange = (event, editor) => {\r\n        this.setState({ text: editor.getData() });\r\n        this.props.update(this.props.type, this.props.id, this.props.field, editor.getData());\r\n    }\r\n\r\n    onFocus = () => {\r\n        this.toggleEditingState();\r\n    }\r\n\r\n    onKeyDown = (event) => {\r\n        if (event.key === 'Enter') {\r\n            this.toggleEditingState();\r\n        }\r\n    }\r\n\r\n    render() {\r\n        if (this.state.isEditing) {\r\n            return (\r\n                <>\r\n                    <CKEditor \r\n                        editor={ClassicEditor}\r\n                        data={this.state.text}\r\n                        onChange={this.onChange}\r\n                        onBlur={this.onFocus}\r\n                        autoFocus \r\n                    />\r\n\r\n                    <SaveButton onClick={this.onFocus}>\r\n                        Save Changes\r\n                    </SaveButton>\r\n                </>\r\n            );\r\n        } else {\r\n            return (\r\n                <Label onClick={this.onFocus}>\r\n                    {this.stripHtml(this.state.text) || this.props.placeholder}\r\n                </Label>\r\n            )\r\n        }\r\n    }\r\n}\r\n\r\n","import React from 'react';\r\nimport Styled from 'styled-components';\r\nimport { Draggable } from 'react-beautiful-dnd';\r\n\r\nimport EditableInput from './EditableInput';\r\nimport { Container, DraggableHandle, Main, Properties, Name, RemoveButton } from './styles/draggable';\r\nimport EditableWYSIWYG from './EditableWYSIWYG';\r\n\r\nconst Content = Styled.div`\r\n    color: #2a3039;\r\n    font-weight: bold;\r\n    line-height: 1.5;\r\n    margin: 0;\r\n    overflow: hidden;\r\n    text-overflow: ellipsis;\r\n    word-break: break-word;\r\n    white-space: nowrap;\r\n`;\r\n\r\nexport default class Step extends React.Component {\r\n    render() {\r\n        return (\r\n            <Draggable draggableId={this.props.step.id} index={this.props.index}>\r\n                {(provided) => (\r\n                    <Container {...provided.draggableProps} ref={provided.innerRef}>\r\n                        <DraggableHandle {...provided.dragHandleProps}>\r\n                            <span>\r\n                                <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\">\r\n                                    <path fill=\"none\" d=\"M0 0h24v24H0V0z\"></path>\r\n                                    <path d=\"M11 18c0 1.1-.9 2-2 2s-2-.9-2-2 .9-2 2-2 2 .9 2 2zm-2-8c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2zm0-6c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2zm6 4c1.1 0 2-.9 2-2s-.9-2-2-2-2 .9-2 2 .9 2 2 2zm0 2c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2zm0 6c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2z\"></path>\r\n                                </svg>                                \r\n                            </span>\r\n                        </DraggableHandle>\r\n                        \r\n                        <Main>\r\n                            <Properties>\r\n                                <Name>\r\n                                    <EditableInput\r\n                                        text={this.props.step.name}\r\n                                        placeholder=\"Placeholder Step Name\"\r\n                                        type=\"step\"\r\n                                        field=\"name\"\r\n                                        id={this.props.step.id}\r\n                                        update={this.props.update}\r\n                                    />                                    \r\n                                </Name>\r\n\r\n                                <RemoveButton onClick={() => this.props.onRemoveClick('step', this.props.activityId, this.props.step.id)}>\r\n                                    <i className=\"fa fa-remove\"></i>\r\n                                </RemoveButton>\r\n                            </Properties>\r\n\r\n                            <Content>\r\n                                <EditableWYSIWYG\r\n                                    text={this.props.step.details}\r\n                                    placeholder=\"Placeholder Step Details\"\r\n                                    type=\"step\"\r\n                                    field=\"details\"\r\n                                    id={this.props.step.id}\r\n                                    update={this.props.update}\r\n                                />\r\n                            </Content>\r\n                        </Main>\r\n                    </Container>\r\n                )}\r\n            </Draggable>\r\n        );\r\n    }\r\n}","import Styled from 'styled-components';\r\n\r\nimport dottedBorderImage from '../../images/dotted-border.svg';\r\n\r\nexport const Controls = Styled.div`\r\n    display: flex;\r\n    align-items: center;\r\n\r\n    button {\r\n        margin-right: 20px;\r\n    }\r\n`;\r\n\r\nexport const AddButton = Styled.button`\r\n    background: none;\r\n    border: 0;\r\n    cursor: pointer;\r\n    display: flex;\r\n    align-items: center;\r\n    padding: 0;\r\n    margin: 0;\r\n    color: #3c80cf;\r\n    text-decoration: underline;\r\n\r\n    &:hover {\r\n        color: #2a3039;\r\n    }\r\n\r\n    &:hover svg {\r\n        fill: #2a3039;\r\n    }\r\n`;\r\n\r\nexport const PlusIcon = Styled.svg`\r\n    height: 18px;\r\n    width: 18px;\r\n    fill: #3c80cf;\r\n    margin-right: 4px;\r\n`;\r\n\r\nexport const Spinner = Styled.input`\r\n    color: #2a3039;\r\n    border-image-source: url(${dottedBorderImage});\r\n    border-image-repeat: round;\r\n    border-image-slice: 1 1;\r\n    border-image-width: 0 0 1px 0;\r\n    border-color: transparent;\r\n    border-style: solid;\r\n    background-color: transparent;\r\n    padding: 0 2px;\r\n`;","import React from 'react';\r\nimport Styled from 'styled-components';\r\nimport { Draggable, Droppable } from 'react-beautiful-dnd';\r\n\r\nimport EditableInput from './EditableInput';\r\nimport Step from './Step';\r\nimport { Container, DraggableHandle, Main, Properties, Name, RemoveButton } from './styles/draggable';\r\nimport { AddButton, Controls, PlusIcon, Spinner } from './styles/controls';\r\n\r\nconst Steps = Styled.div`\r\n    min-height: 2.5rem;\r\n    flex-grow: 1;\r\n`;\r\n\r\nexport default class Activity extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            increment: {\r\n                step: 1,\r\n                min: 1, \r\n                max: 10,\r\n            }\r\n        }\r\n    }\r\n\r\n    onIncrementStepChange = (event) => {\r\n        let value = event.target.value.toLowerCase();\r\n\r\n        if (value === 'e') {\r\n            value = this.state.increment.step;\r\n        } else if (value < this.state.increment.min) {\r\n            value = this.state.increment.min;\r\n        } else if (value > this.state.increment.max) {\r\n            value = this.state.increment.max;\r\n        }\r\n\r\n        this.setState({\r\n            increment: {\r\n                ...this.state.increment,\r\n                step: value\r\n            }\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Draggable draggableId={this.props.activity.id} index={this.props.index}>\r\n                {(provided) => (\r\n                    <Container {...provided.draggableProps} ref={provided.innerRef}>\r\n                        <DraggableHandle {...provided.dragHandleProps}>\r\n                            <span>\r\n                                <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\">\r\n                                    <path fill=\"none\" d=\"M0 0h24v24H0V0z\"></path>\r\n                                    <path d=\"M11 18c0 1.1-.9 2-2 2s-2-.9-2-2 .9-2 2-2 2 .9 2 2zm-2-8c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2zm0-6c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2zm6 4c1.1 0 2-.9 2-2s-.9-2-2-2-2 .9-2 2 .9 2 2 2zm0 2c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2zm0 6c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2z\"></path>\r\n                                </svg>                                \r\n                            </span>\r\n                        </DraggableHandle>\r\n                        \r\n                        <Main>\r\n                            <Properties>\r\n                                <Name>\r\n                                    <EditableInput\r\n                                        text={this.props.activity.name}\r\n                                        placeholder=\"Placeholder Activity Name\"\r\n                                        type=\"activity\"\r\n                                        field=\"name\"\r\n                                        id={this.props.activity.id}\r\n                                        update={this.props.update}\r\n                                    />\r\n                                </Name>\r\n\r\n                                <Controls>\r\n                                    <AddButton onClick={() => this.props.onAddStepClick(this.props.activity.id, this.state.increment.step)}>\r\n                                        <PlusIcon height=\"18\" viewBox=\"0 0 24 24\" width=\"18\" xmlns=\"http://www.w3.org/2000/svg\">\r\n                                        <path d=\"M19 13h-6v6h-2v-6H5v-2h6V5h2v6h6v2z\"></path>\r\n                                        <path d=\"M0 0h24v24H0z\" fill=\"none\"></path>\r\n                                        </PlusIcon>\r\n                                        \r\n                                        Create {this.state.increment.step} new {this.state.increment.step > 1 ? 'Steps' : 'Step'}\r\n                                    </AddButton>\r\n\r\n                                    <Spinner type=\"number\" min={this.state.increment.min} max={this.state.increment.max} value={this.state.increment.step} onChange={this.onIncrementStepChange} />\r\n                                </Controls>                                  \r\n\r\n                                <RemoveButton onClick={() => this.props.onRemoveClick('activity', this.props.activity.id)}>\r\n                                    <i className=\"fa fa-remove\"></i>\r\n                                </RemoveButton>\r\n                            </Properties>\r\n\r\n                            <Droppable droppableId={this.props.activity.id} type=\"step\">\r\n                                {(provided) => (\r\n                                    <Steps {...provided.droppableProps} ref={provided.innerRef}>\r\n                                        {this.props.steps.map((step, index) => <Step key={step.id} activityId={this.props.activity.id} step={step} index={index} onRemoveClick={this.props.onRemoveClick} update={this.props.update} />)}\r\n                                        {provided.placeholder}\r\n                                    </Steps>\r\n                                )}\r\n                            </Droppable>\r\n                        </Main>\r\n                    </Container>\r\n                )}\r\n            </Draggable>\r\n        )\r\n    }\r\n}","import PropTypes from 'prop-types';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport ShortID from 'shortid';\nimport Styled from 'styled-components';\nimport { DragDropContext, Droppable } from 'react-beautiful-dnd';\nimport { init } from 'contentful-ui-extensions-sdk';\n\nimport Activity from './components/Activity';\nimport { AddButton, Controls, PlusIcon, Spinner } from './components/styles/controls';\n\nimport 'normalize.css';\nimport './index.css';\n\nconst Container = Styled.div` \n    margin-top: 12px;\n`;\n\nclass SortableProcedure extends React.Component {\n    static propTypes = {\n        sdk: PropTypes.object.isRequired\n    };\n\n    detachExternalChangeHandler = null;\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            procedure: props.sdk.field.getValue() || this.initialProcedureState(),\n            increment: {\n                step: 1,\n                min: 1,\n                max: 3,\n            }\n        };\n\n        console.log(this.state);\n    }\n\n    initialProcedureState = () => {\n        return {\n            activities: {},\n            activityOrder: [],\n            steps: {},\n        };   \n    }\n\n    onIncrementStepChange = (event) => {\n        let value = event.target.value.toLowerCase();\n\n        if (value === 'e') {\n            value = this.state.increment.step;\n        } else if (value < this.state.increment.min) {\n            value = this.state.increment.min;\n        } else if (value > this.state.increment.max) {\n            value = this.state.increment.max;\n        }\n\n        this.setState({\n            increment: {\n                ...this.state.increment,\n                step: value\n            }\n        });\n    }\n\n    onAddActivityClick = (amount) => {\n        const activities = { ...this.state.procedure.activities };\n        const activityOrder = [...this.state.procedure.activityOrder];\n        \n        for (let i = 0; i < amount; i++) {\n            const activityId = ShortID.generate();\n\n            activities[activityId] = {\n                id: activityId,\n                name: null,\n                stepOrder: [],\n            };\n\n            activityOrder.push(activityId);\n        }\n\n        const procedure = {\n            ...this.state.procedure,\n            activities: activities,\n            activityOrder: activityOrder\n        };\n\n        this.updateProcedure(procedure);\n    }\n\n    onAddStepClick = (activityId, amount) => {\n        const activities = { ...this.state.procedure.activities };\n        const activity = activities[activityId];\n        const steps = { ...this.state.procedure.steps }\n        const stepOrder = [...activity.stepOrder];\n\n        for (let i = 0; i < amount; i++) {\n            const stepId = ShortID.generate();\n\n            steps[stepId] = {\n                id: stepId,\n                name: null,\n                details: null\n            };\n\n            stepOrder.push(stepId);\n        }\n\n        const updatedActivity = {\n            ...this.state.procedure.activities[activity.id],\n            stepOrder: stepOrder,\n        };\n\n        const procedure = {\n            ...this.state.procedure,\n            steps: steps,\n            activities: {\n                ...this.state.procedure.activities,\n                [activity.id]: updatedActivity\n            }\n        }            \n\n        this.updateProcedure(procedure);\n    }\n\n    onRemoveClick = (type, activityId, stepId = null) => {\n        // If removing an activity...\n        if (type === 'activity') {\n            // Cheeck to see if the activity has steps...\n            const activity = this.state.procedure.activities[activityId];\n\n            // If there are steps, prompt the user with a confirmation dialog box\n            if (activity.stepOrder.length > 0) {\n                this.props.sdk.dialogs.openConfirm({\n                    title: `Remove ${activity.name || 'Untitled'}?`,\n                    message: `The activity \"${activity.name || 'Untitled'}\" has ${activity.stepOrder.length} procedure ${activity.stepOrder.length > 1 ? 'steps' : 'step'}.\n                        Deleting this activity will also delete all the steps. Do you want to proceed?`,\n                    confirmLabel: 'Yes, delete the activity and its steps',\n                    cancelLabel: 'Nevermind'\n                })\n                    .then(result => {\n                        if (result === true) {\n                            this.removeActivity(activityId);\n                        }\n                    })\n            }\n\n            // If there are no steps, then delete the activity without prompt\n            else {\n                this.removeActivity(activityId);\n            }\n        }\n\n        // If removing a step...\n        else if (type === 'step') {\n            const activities = { ...this.state.procedure.activities }\n            const activity = activities[activityId];\n            const stepOrder = [...activity.stepOrder];\n            const steps = { ...this.state.procedure.steps }\n\n            // Remove the step\n            delete steps[stepId];\n\n            // Remove the step from the activity's step order\n            const reducedActivityStepOrder = stepOrder.filter(id => id !== stepId);\n            const updatedActivity = {\n                ...activity,\n                stepOrder: reducedActivityStepOrder\n            };\n\n            const procedure = {\n                ...this.state.procedure,\n                steps: steps,\n                activities: {\n                    ...this.state.procedure.activities,\n                    [updatedActivity.id]: updatedActivity\n                }\n            };\n\n            this.updateProcedure(procedure);\n        }\n    }\n\n    onExternalChangeHandler = (value) => {\n        this.setState({ procedure: value || this.initialProcedureState() });\n    }\n\n    onDragStart = () => {\n        // Stop the autoresizer or it messes with the dragging\n        this.props.sdk.window.stopAutoResizer();\n    }\n\n    onDragEnd = (event) => {\n        const { destination, source, draggableId, type } = event;\n\n        // If the draggable has been moved outside the drag and drop context, do nothing\n        if (!destination) {\n            return;\n        }\n\n        // If the draggable has been dropped on the same position, do nothing \n        if (destination.droppableId === source.droppableId && destination.index === source.index) {\n            return;\n        }\n\n        // If the user dragged an activity...\n        if (type === 'activity') {\n            const activityOrder = [...this.state.procedure.activityOrder];\n            activityOrder.splice(source.index, 1);\n            activityOrder.splice(destination.index, 0, draggableId);\n\n            const procedure = {\n                ...this.state.procedure,\n                activityOrder: activityOrder\n            }\n\n            this.updateProcedure(procedure);\n        }\n        \n        // If the user dragged a step...\n        else {\n            const sourceActivity = this.state.procedure.activities[source.droppableId];\n            const destinationActivity = this.state.procedure.activities[destination.droppableId];\n\n            // If the step was re-ordered within the same activity...\n            if (sourceActivity === destinationActivity) {\n                const stepOrder = [...sourceActivity.stepOrder];\n                stepOrder.splice(source.index, 1);\n                stepOrder.splice(destination.index, 0, draggableId);\n\n                const activity = {\n                    ...sourceActivity,\n                    stepOrder: stepOrder\n                };\n\n                const procedure = {\n                    ...this.state.procedure,\n                    activities: {\n                        ...this.state.procedure.activities,\n                        [activity.id]: activity\n                    }\n                };\n\n                this.updateProcedure(procedure);\n            } \n\n            // If the step was moved to another activity \n            else {\n                const sourceActivityStepOrder = [...sourceActivity.stepOrder];\n                const destinationActivityStepOrder = [...destinationActivity.stepOrder];\n\n                sourceActivityStepOrder.splice(source.index, 1);\n                destinationActivityStepOrder.splice(destination.index, 0, draggableId);\n\n                const updatedSourceActivity = {\n                    ...sourceActivity,\n                    stepOrder: sourceActivityStepOrder,\n                };\n\n                const updatedDestinationActivity = {\n                    ...destinationActivity,\n                    stepOrder: destinationActivityStepOrder,\n                };\n\n                const procedure = {\n                    ...this.state.procedure,\n                    activities: {\n                        ...this.state.procedure.activities,\n                        [updatedSourceActivity.id]: updatedSourceActivity,\n                        [updatedDestinationActivity.id]: updatedDestinationActivity\n                    }\n                };\n\n                this.updateProcedure(procedure);\n            }\n        }\n\n        this.props.sdk.window.startAutoResizer();\n    }\n\n    updateProcedure = (procedure) => {\n        this.setState({ procedure: procedure });\n        this.props.sdk.field.setValue(procedure);\n    }\n\n    removeActivity = (id) => {\n        const activities = { ...this.state.procedure.activities };\n        const activityOrder = [...this.state.procedure.activityOrder];\n\n        delete activities[id]; \n        const reducedActivityOrder = activityOrder.filter(activityId => activityId !== id);\n\n        const procedure = {\n            ...this.state.procedure,\n            activities: activities,\n            activityOrder: reducedActivityOrder\n        };\n\n        this.updateProcedure(procedure);\n    }\n\n    update = (type, id, field, value) => {\n        if (type === 'activity') {\n            const activities = { ...this.state.procedure.activities };\n            activities[id][field] = value;\n\n            const procedure = {\n                ...this.state.procedure,\n                activities: activities\n            }\n\n            this.updateProcedure(procedure);\n\n        } else if (type === 'step') {\n            const steps = { ...this.state.procedure.steps };\n            steps[id][field] = value;\n\n            const procedure = {\n                ...this.state.procedure,\n                steps: steps\n            };\n\n            this.updateProcedure(procedure);\n        }\n    }\n    \n    componentDidMount() {\n        this.props.sdk.window.startAutoResizer();\n\n        // Handler for external field value changes (e.g. when multiple authors are working on the same entry)\n        this.detachExternalChangeHandler = this.props.sdk.field.onValueChanged(this.onExternalChangeHandler);\n    }\n\n    render() {\n        return (\n            <Container>\n                <Controls>\n                    <AddButton onClick={() => this.onAddActivityClick(this.state.increment.step)}>\n                        <PlusIcon height=\"18\" viewBox=\"0 0 24 24\" width=\"18\" xmlns=\"http://www.w3.org/2000/svg\">\n                           <path d=\"M19 13h-6v6h-2v-6H5v-2h6V5h2v6h6v2z\"></path>\n                           <path d=\"M0 0h24v24H0z\" fill=\"none\"></path>\n                        </PlusIcon>\n                        \n                        Create {this.state.increment.step} new {this.state.increment.step > 1 ? 'Activities' : 'Activity'}\n                    </AddButton>\n\n                    <Spinner type=\"number\" min={this.state.increment.min} max={this.state.increment.max} value={this.state.increment.step} onChange={this.onIncrementStepChange} />\n                </Controls>\n\n                <DragDropContext onDragStart={this.onDragStart} onDragEnd={this.onDragEnd}>\n                    <Droppable droppableId=\"activities\" type=\"activity\">\n                        {(provided) => (\n                            <Container {...provided.droppableProps} ref={provided.innerRef}>\n                                {this.state.procedure.activityOrder.map((activityId, index) => {\n                                    const activity = this.state.procedure.activities[activityId];\n                                    const steps = activity.stepOrder.map(stepId => this.state.procedure.steps[stepId]);\n\n                                    return <Activity\n                                        key={activity.id}\n                                        activity={activity}\n                                        steps={steps}\n                                        index={index}\n                                        onAddStepClick={this.onAddStepClick}\n                                        onRemoveClick={this.onRemoveClick}\n                                        update={this.update}\n                                    />\n                                })}\n\n                                {provided.placeholder}\n                            </Container>\n                        )}\n                    </Droppable>\n                </DragDropContext>\n            </Container>\n        )\n    }\n}\n\nconsole.clear();        // TODO: remove after development\n\ninit(sdk => {\n    ReactDOM.render(<SortableProcedure sdk={sdk} />, document.getElementById('root'));\n});\n\n// TODO: Add external change handler for collaborative editing","module.exports = __webpack_public_path__ + \"static/media/dotted-border.06dcc64a.svg\";","function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 75;"],"sourceRoot":""}